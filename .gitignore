# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*,cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# IPython Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# dotenv
.env

# virtualenv
venv/
ENV/

# Spyder project settings
.spyderproject

# Rope project settings
.ropeproject

#Matrices locales de permeabilidad
import numpy as np

n = int(input("Digite numero de estratos: ")) #Numero de estratos

MatPlocal = np.zeros((n,2,2))#Matriz permeabilidad

for i in range (n):
    l=float(input("Digite longitud del estrato:"))
    kper=float(input("Digite permeablidad del estrato: "))
    coef=kper/l
#MatCons=np.array(([1,-1],[-1,1]))
#Et=coef*MatCons
#print Et 
    for j in range (2):
        for k in range (2):
                if (j == k): 
                    MatPlocal[i,j,k]= coef
                else:
                    MatPlocal[i,j,k]= -coef
#print MatPlocal

#---------------------------------------------------------------------------
#Ensamlbe general

#r=n+1
#MatP = np.zeros((r,r))
#l=0
#for i in range (0,n): 
#    for j in range (0,2):
#        for k in range(0,2):
#            if (j==k):
#                temp= MatPlocal[i,j,k]
#                MatP[j+l,k+l ]=temp
#            else:
#                temp= MatPlocal[i,j,k]
#                MatP[j+l,k+l]= temp
#    l=l+1
#print MatP
##-----------------------------------------------------------------------------
r=n+1
MatP = np.zeros((r,r))
l=0
jant=0
kant=0
tempant=0
for i in range (0,n): 
    for j in range (0,2):
        for k in range(0,2):
            if (j==k):
                temp1= MatPlocal[i,j,k]
                if (jant==j+l and kant==k+l):
                    MatP[j+l,k+l]=temp1+tempant
            else:
                temp2= MatPlocal[i,j,k]
                MatP[j+l,k+l]= temp2           
    if (jant==0):
        jant= jant+ j +l
        kant= kant+k+l
        tempant=temp1
        l=l+1
    elif (jant!=0):
        jant=1+l
        kant=1+l
        tempant=temp1
        l=l+1
MatP[j+l-1,k+l-1]=MatPlocal[i,j,k]
#print MatP
#------------------------------------------------------------------------------
#Aplicar condiciones de forntera

CoFr = np.zeros(r)
LE=float(input("Digite energia a gastar "))
CoFr[0]= float(input("Digite energia en z=0: "))
CoFr[r-1]= LE
s=0
t=r-11
for i in range (1,t):
    CoFr[i]=(1+s)
    s=s+1
print CoFr
